name: Build, Test, and Deploy Node.js Backend

# Trigger the workflow on pushes to the 'main' branch.
on:
  push:
    branches:
      - main

# Define the job that will run. The job is named 'build-and-deploy'.
jobs:
  build-and-deploy:
    # The environment to run the job on is 'ubuntu-latest'.
    runs-on: ubuntu-latest

    # Define the sequence of steps to execute in this job.
    steps:
    
    # Step 1: Checkout the repository code.
    - name: Checkout code
      uses: actions/checkout@v3
      # This action pulls the repository's code into the runner environment.

    # Step 2: Set up Node.js environment.
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'  # Specify the Node.js version to be used.
      # Ensures the workflow uses Node.js version 18, compatible with the backend application.

    - name: Cache Node.js modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.npm
          ~/.cache
        key: ${{ runner.os }}-node-${{ hashFiles('webapp/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-   

    # Step 3: Install dependencies for the Node.js backend.
    - name: Install dependencies
      run: |
        cd api  # Navigate into the 'api' directory.
        npm install  # Install the required dependencies.
      # Installs npm dependencies listed in the 'package.json' of the backend.

    # Step 4: Run tests to ensure the backend is functioning correctly.
    - name: Run tests
      run: |
        cd api  # Navigate into the 'api' directory.
        npm test  # Run the test suite.
      # Executes the tests defined in the 'test' script of the 'package.json'.

    # Step 5: Set up Docker Buildx for multi-platform image builds.
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      # Initializes Docker Buildx to support building images for different platforms.

    # Step 6: Build and push the Docker image for the backend.
    - name: Build and push Docker image
      run: |
        cd api  # Navigate into the 'api' directory.
        docker build -t ${{ secrets.DOCKER_USERNAME }}/api:latest .  # Build the Docker image.
        echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin  # Log in to Docker Hub.
        docker push ${{ secrets.DOCKER_USERNAME }}/api:latest  # Push the image to Docker Hub.
      # Builds the Docker image from the backend code and pushes it to Docker Hub under 'api:latest' tag.

    # Step 7: Deploy the Docker image to AWS EC2.
    - name: Deploy to AWS EC2
      uses: appleboy/ssh-action@v0.1.6  # Use SSH action to connect to EC2 instance.
      with:
        host: ${{ secrets.AWS_EC2_PUBLIC_IP }}  # Public IP of the EC2 instance.
        username: ubuntu  # Username for SSH connection.
        key: ${{ secrets.AWS_EC2_SSH_KEY }}  # Private SSH key for EC2 instance.
        port: 22  # Default SSH port.
        script: |
          docker pull ${{ secrets.DOCKER_USERNAME }}/api:latest  # Pull the latest Docker image.
          docker stop api || true  # Stop existing 'api' container if running.
          docker rm api || true  # Remove existing 'api' container.
          docker run -d -p 3000:3000 --name api ${{ secrets.DOCKER_USERNAME }}/api:latest  # Run the new container.
      # Connects to the AWS EC2 instance, pulls the latest backend image, and deploys it, ensuring the application is running on port 3000.
